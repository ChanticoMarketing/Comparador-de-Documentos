# Prompt para Completar la WebApp "OCR-Matcher AI"

**Rol Primario:** Eres un Agente de IA experto en desarrollo full-stack con React, TypeScript, Node.js, Express, Drizzle ORM y PostgreSQL. Tu tarea es completar las funcionalidades pendientes de la WebApp "OCR-Matcher AI" basándote en el código existente y las especificaciones detalladas a continuación.

**Objetivo Principal:** Finalizar la WebApp para que esté 100% funcional, enfocándote en las áreas no completadas, **SIN MODIFICAR NI AFECTAR NEGATIVAMENTE LA FUNCIONALIDAD CENTRAL EXISTENTE DE COMPARACIÓN DE DOCUMENTOS** (subida de archivos, procesamiento OCR y comparación con IA). Esta funcionalidad ya sirve y es crítica.

**Contexto General de la Aplicación:**
La WebApp permite a los usuarios subir facturas y órdenes de entrega para compararlas. Utiliza un servicio de OCR (API4AI) para extraer texto y un servicio de IA (OpenAI GPT-4o/GPT-4o-mini) para analizar y comparar los documentos, identificando coincidencias, advertencias y discrepancias. Los resultados se muestran en la interfaz y se pueden exportar a PDF/Excel. Las sesiones y resultados se almacenan en una base de datos PostgreSQL usando Drizzle ORM.

**Archivos Principales del Proyecto (revisar todos los archivos proporcionados para un entendimiento completo):**
* **Frontend (client/src/):** `App.tsx`, `pages/dashboard.tsx`, `pages/history.tsx`, `pages/settings.tsx`, `components/dashboard/*`, `components/layout/*`, `types/index.ts`, `lib/api.ts`, `lib/queryClient.ts`.
* **Backend (server/):** `index.ts`, `routes.ts`, `ocr.ts`, `matcher.ts`, `storage.ts`, `utils.ts`.
* **Compartido (shared/):** `schema.ts`.
* **Base de datos (db/):** `index.ts`, `seed.ts`.
* **Configuración:** `package.json`, `vite.config.ts`, `drizzle.config.ts`, `tsconfig.json`.

---

## Tareas Detalladas por Módulo/Funcionalidad:

### 1. Autenticación y Gestión de Usuarios (Prioridad Alta)
    * **Descripción:** Actualmente existe una tabla `users` en `shared/schema.ts` pero no hay un sistema de autenticación implementado. Es crucial asegurar la aplicación.
    * **Tareas:**
        1.  **Backend:**
            * Implementar endpoints de API para registro (`/api/auth/register`), inicio de sesión (`/api/auth/login`), cierre de sesión (`/api/auth/logout`) y verificación de sesión (`/api/auth/session`).
            * Utilizar `express-session` y `connect-pg-simple` (ya en `package.json`) para gestionar sesiones de usuario, almacenándolas en la base de datos.
            * Utilizar `passport` y `passport-local` (ya en `package.json`) para la estrategia de autenticación local.
            * Hashear contraseñas antes de guardarlas en la base de datos (usar `bcrypt` o similar; añadir dependencia si es necesario).
            * Proteger todos los endpoints de API existentes (excepto los de autenticación) para que solo usuarios autenticados puedan acceder.
            * Modificar `server/storage.ts` para que las funciones `createSession`, `getAllSessions`, `getSessionComparisons`, y `saveComparisonResult` se asocien y filtren por el `userId` del usuario autenticado. Esto implicará añadir un campo `userId` a las tablas `sessions` y, potencialmente, `comparisons` en `shared/schema.ts` y actualizar las relaciones y queries.
        2.  **Frontend:**
            * Crear páginas/componentes para Login y Registro.
            * Modificar `App.tsx` para incluir rutas protegidas y públicas.
            * Implementar lógica en `lib/api.ts` o un nuevo servicio de autenticación para interactuar con los endpoints de auth.
            * Gestionar el estado de autenticación del usuario globalmente (e.g., React Context o Zustand).
            * Mostrar condicionalmente opciones de Login/Logout en el layout.
            * La página de Configuración (`pages/settings.tsx`) **DEBE** ser accesible solo por usuarios autenticados, ya que maneja API keys.
    * **Archivos Clave a Modificar (lista no exhaustiva):** `server/routes.ts`, `server/storage.ts`, `shared/schema.ts`, `client/src/App.tsx`, `client/src/lib/api.ts`, crear nuevas páginas/componentes de autenticación en `client/src/pages` o `client/src/components/auth`.
    * **Consideración Importante:** La funcionalidad de comparación de documentos (`/api/upload`, `processFiles` en `server/routes.ts`, `server/ocr.ts`, `server/matcher.ts`) debe permanecer intacta en su lógica central, solo añadiendo la capa de autorización.

---

### 2. Visualización Detallada de Comparaciones (Rutas y Componentes)
    * **Descripción:** Actualmente, la vista de "Historial" (`pages/history.tsx`) enlaza a `/comparison/${session.id}`, pero esta ruta no está definida en `client/src/App.tsx` ni existe un componente dedicado para mostrar un resultado de comparación específico por su ID.
    * **Tareas:**
        1.  **Frontend:**
            * En `client/src/App.tsx`, añadir una nueva ruta parametrizada, por ejemplo: `<Route path="/comparison/:comparisonId" component={ComparisonDetailPage} />`.
            * Crear un nuevo componente/página `ComparisonDetailPage` (e.g., `client/src/pages/comparison-detail.tsx`).
            * Este nuevo componente deberá:
                * Obtener el `comparisonId` del parámetro de la ruta.
                * Utilizar `useQuery` (de `@tanstack/react-query`) y una función de `lib/api.ts` para llamar al endpoint `/api/comparisons/:id` y obtener los datos de la comparación específica.
                * Reutilizar el componente `ResultsSection` pasándole el `comparisonId` como prop para mostrar los resultados.
                * Envolver este contenido en `DashboardLayout` con un título adecuado (e.g., "Detalle de Comparación #ID").
    * **Archivos Clave a Modificar:** `client/src/App.tsx`, `client/src/components/dashboard/results-section.tsx` (para asegurar que maneja bien el `comparisonId` prop), crear `client/src/pages/comparison-detail.tsx`.

---

### 3. Mejoras y Finalización del Servidor y Lógica de Negocio
    * **Descripción:** Varios puntos en el backend necesitan refinamiento para completar la funcionalidad y robustez.
    * **Tareas:**
        1.  **Configuración Dinámica del Límite de Tamaño de Archivo:**
            * En `server/routes.ts`, la configuración de `multer` tiene un `fileSize` hardcodeado a 10MB.
            * Modificar esto para que, al inicializar `multer`, lea el valor `maxFileSize` desde la configuración de la aplicación almacenada en la base de datos (obtenida a través de `storage.getSettings()`). Si no hay settings, usar un default razonable (e.g., 10MB).
        2.  **Claridad en Nombres de Archivo para Comparaciones Múltiples:**
            * En `server/routes.ts`, la función `processFiles` actualmente toma `invoiceFiles[0].originalname` y `deliveryOrderFiles[0].originalname` para el `comparisonResult`, incluso si los textos de múltiples archivos son concatenados.
            * Modificar para que los nombres de archivo reflejen mejor el contenido procesado. Por ejemplo, si se concatenan múltiples archivos, el nombre podría ser "Múltiples Facturas" o una lista concatenada de los primeros N nombres. Alternativamente, y preferiblemente si el tiempo lo permite, procesar cada par de factura/orden de entrega individualmente si se suben múltiples archivos, creando múltiples `ComparisonResult`. **Para esta fase, si la lógica de comparación individual es muy compleja, asegúrate al menos que los nombres de archivo guardados sean representativos (e.g., "Facturas Consolidadas_timestamp" y "Órdenes Consolidadas_timestamp") y que la concatenación de texto existente sea robusta.**
        3.  **Estado de API Dinámico en Sidebar:**
            * El componente `client/src/components/layout/sidebar.tsx` muestra un estado de API hardcodeado como "verde".
            * Implementar endpoints `/api/status/api4ai` y `/api/status/openai` en `server/routes.ts` que hagan una prueba básica (e.g., un request simple no costoso o verificar configuración) a los respectivos servicios y devuelvan su estado (e.g., "ok", "error", "not_configured").
            * En el frontend, `Sidebar` deberá hacer `useQuery` a estos endpoints y mostrar el estado dinámicamente.
        4.  **Funcionalidad "Guardar Resultados" (`POST /api/comparisons/save`):**
            * En `server/routes.ts`, este endpoint actualmente es un placeholder.
            * La configuración `autoSaveResults` existe en `client/src/types/index.ts` y `shared/schema.ts`.
            * Si `autoSaveResults` está desactivado en la configuración, el botón "Guardar resultados" en `ResultsSection` debe activarse.
            * El endpoint `/api/comparisons/save` debe, si es necesario, realizar una acción específica (e.g., marcar un resultado como "guardado permanentemente" o simplemente confirmar que ya está guardado si `autoSaveResults` estaba activo). Actualmente, `storage.saveComparisonResult` ya guarda los resultados detallados. Si `autoSaveResults` es `false`, la lógica en `processFiles` no debería llamar a `storage.saveComparisonResult` automáticamente. En su lugar, `processFiles` podría guardar el resultado en un estado temporal (quizás en `processingState` o una caché temporal) y el endpoint `/api/comparisons/save` transferiría esto a la base de datos persistente. **Por simplicidad para esta fase, si `autoSaveResults` es `false`, el resultado NO se guarda automáticamente. El endpoint `/api/comparisons/save` (accionado por el botón) entonces llamará a `storage.saveComparisonResult` con los datos del último resultado procesado (que necesitarás almacenar temporalmente si no se guardó).**
        5.  **Robustez del Servicio OCR (`server/ocr.ts`):**
            * La función `splitPdf` es un mock. Si la API de API4AI no maneja bien PDFs de múltiples páginas o si se requiere un análisis página por página antes de la extracción de texto, esta función necesitaría ser implementada usando una librería como `pdf-lib`. **Considerar esto de baja prioridad si API4AI maneja PDFs de múltiples páginas adecuadamente, para no arriesgar la funcionalidad OCR existente.**
            * Las funciones `extractTables` y `extractMetadata` son heurísticas. Evaluar si la calidad actual es suficiente o si el `MatcherService` compensa sus limitaciones. **No modificar a menos que sea estrictamente necesario para la funcionalidad básica de comparación.**
    * **Archivos Clave a Modificar:** `server/routes.ts`, `server/storage.ts`, `server/ocr.ts` (potencialmente), `client/src/components/layout/sidebar.tsx`, `client/src/components/dashboard/results-section.tsx`.

---

### 4. Mejoras Generales y UI/UX
    * **Descripción:** Pequeños ajustes para mejorar la experiencia del usuario y la completitud.
    * **Tareas:**
        1.  **Not Found Page (`client/src/pages/not-found.tsx`):**
            * Actualmente dice "Did you forget to add the page to the router?". Cambiar el mensaje a algo más amigable para el usuario final, como "¡Ups! Página no encontrada. Parece que te perdiste." y ofrecer un botón para "Volver al Dashboard".
        2.  **Consistencia en Mensajes de Error y Éxito (Toasts):**
            * Revisar el uso de `useToast` en todos los componentes y asegurar que los mensajes sean claros, consistentes y estén traducidos al español donde aplique.
        3.  **Manejo de Cancelación de Procesamiento:**
            * En `server/routes.ts`, dentro de `processFiles`, verificar periódicamente si `processingState.isProcessing` sigue siendo `true`. Si cambia a `false` (indicando una cancelación), detener el procesamiento de manera elegante (ej. dejar de iterar sobre archivos, no hacer más llamadas a APIs externas) y limpiar los archivos temporales.
    * **Archivos Clave a Modificar:** `client/src/pages/not-found.tsx`, varios componentes de frontend que usan `toast`, `server/routes.ts`.

---

**Restricciones Críticas (¡No olvidar! 💀):**
1.  **NO ROMPER LA COMPARACIÓN DE DOCUMENTOS:** La lógica central de `server/ocr.ts` (extracción de texto con API4AI), `server/matcher.ts` (comparación con OpenAI y formateo del resultado JSON), y el flujo de procesamiento iniciado por `/api/upload` deben permanecer funcionales como están en su núcleo. Las modificaciones deben ser aditivas o para corrección de errores obvios, sin alterar la estructura del resultado de comparación (`ComparisonResult`) que ya se espera.
2.  **MANTENER ESTILO DE CÓDIGO Y TECNOLOGÍAS:** Usar TypeScript, React con Hooks, TailwindCSS, shadcn/ui componentes, Express, Drizzle ORM, y las librerías ya presentes en `package.json`.
3.  **ENTORNO DE DESARROLLO:** El proyecto se desarrolla en Replit. Asegurar que las soluciones sean compatibles con este entorno.

**Formato de Salida Esperado:**
El código modificado y los nuevos archivos necesarios para implementar todas las tareas descritas. Comenta brevemente en el código las secciones añadidas o modificadas significativamente.

**Consideración Final:** Si alguna tarea entra en conflicto directo con la restricción de no afectar la funcionalidad de comparación, prioriza la estabilidad de la comparación y anota la tarea como "pendiente de clarificación" o propón una alternativa segura.

---
Asegúrate de que la IA entienda bien la prioridad de la autenticación y la nueva ruta para ver comparaciones específicas, ya que son las piezas más grandes que faltan para una aplicación "completa" más allá del núcleo de comparación. ¡Mucha suerte, y que la fuerza (y el café ☕) te acompañen! Si esto sale bien, ¡hasta te invito unas chelas virtuales! 🍻 De lo contrario... bueno, ya sabes. 😉