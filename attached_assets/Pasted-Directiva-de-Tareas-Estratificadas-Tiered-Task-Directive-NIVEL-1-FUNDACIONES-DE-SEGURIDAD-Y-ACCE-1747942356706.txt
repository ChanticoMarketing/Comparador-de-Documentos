Directiva de Tareas Estratificadas (Tiered Task Directive):
NIVEL 1: FUNDACIONES DE SEGURIDAD Y ACCESO (Máxima Prioridad)

Épica: Implementación de Autenticación y Autorización Robusta.
User Story 1.1 (Backend): Como desarrollador, quiero implementar endpoints seguros para registro, inicio y cierre de sesión (/api/auth/...) utilizando express-session, connect-pg-simple, y passport con passport-local, con hashing de contraseñas (e.g., bcrypt).
Archivos afectados: server/routes.ts, server/index.ts (para middlewares).
User Story 1.2 (Backend): Como usuario, quiero que mis datos (sesiones, comparaciones) estén asociados a mi cuenta y que solo yo pueda acceder a ellos.
Tareas Técnicas: Añadir userId a tablas sessions y comparisons en shared/schema.ts; actualizar server/storage.ts para filtrar y asociar por userId.
Archivos afectados: shared/schema.ts, server/storage.ts, server/routes.ts (para pasar userId a storage).
User Story 1.3 (Frontend): Como usuario, quiero poder registrarme, iniciar sesión y que la aplicación gestione mi estado de autenticación para acceder a funcionalidades protegidas.
Tareas Técnicas: Crear componentes de Login/Registro; modificar client/src/App.tsx para rutas protegidas; implementar llamadas API en client/src/lib/api.ts.
Archivos afectados: client/src/App.tsx, client/src/lib/api.ts, nuevos componentes en client/src/pages o client/src/components/auth.
User Story 1.4 (Seguridad): La página de configuración (client/src/pages/settings.tsx) que maneja API Keys debe ser accesible ÚNICAMENTE por usuarios autenticados.
Archivos afectados: client/src/pages/settings.tsx, lógica de rutas protegidas en client/src/App.tsx.
NIVEL 2: FUNCIONALIDAD ESENCIAL DE NAVEGACIÓN Y VISUALIZACIÓN (Prioridad Media-Alta)

Épica: Acceso y Visualización Detallada de Resultados de Comparación.
User Story 2.1 (Frontend): Como usuario, quiero poder hacer clic en una sesión del historial y ver sus detalles completos en una página dedicada.
Tareas Técnicas: Implementar la ruta /comparison/:comparisonId en client/src/App.tsx; crear la página ComparisonDetailPage que obtenga comparisonId, llame a /api/comparisons/:id y reutilice ResultsSection para mostrar los datos.
Archivos afectados: client/src/App.tsx, crear client/src/pages/comparison-detail.tsx, client/src/components/dashboard/results-section.tsx.
NIVEL 3: OPTIMIZACIÓN Y ROBUSTEZ DEL SERVIDOR (Prioridad Media - Proceder con Extrema Precaución)

Épica: Fortalecimiento y Flexibilización de la Lógica del Servidor.
Constraint Específico para Nivel 3: Cualquier modificación aquí debe ser evaluada rigurosamente para asegurar que NO impacta la lógica de server/ocr.ts en su extracción ni server/matcher.ts en su procesamiento y generación de resultados.
User Story 3.1 (Backend): Como administrador, quiero que el límite de tamaño de archivo para subidas (multer en server/routes.ts) sea dinámico, basado en el valor maxFileSize de storage.getSettings().
Archivos afectados: server/routes.ts.
User Story 3.2 (Backend): Como usuario, quiero que los nombres de archivo guardados en ComparisonResult (generados en processFiles dentro de server/routes.ts) sean más representativos si se procesan textos de múltiples archivos concatenados (ej., "Facturas Consolidadas_timestamp"). No alterar el mecanismo de concatenación de texto para el comparador en esta fase si implica riesgo.
Archivos afectados: server/routes.ts (específicamente la función processFiles).
User Story 3.3 (Backend & Frontend): Como usuario, quiero ver el estado real de las APIs externas (API4AI, OpenAI) en el sidebar.
Tareas Técnicas: Crear endpoints /api/status/api4ai y /api/status/openai en server/routes.ts para pruebas básicas de conectividad/configuración. client/src/components/layout/sidebar.tsx debe consumir estos endpoints.
Archivos afectados: server/routes.ts, client/src/components/layout/sidebar.tsx.
User Story 3.4 (Backend): Como usuario, si la configuración autoSaveResults es false, quiero que los resultados de la comparación no se guarden automáticamente, sino solo cuando yo lo indique explícitamente a través del botón "Guardar resultados" (/api/comparisons/save en server/routes.ts).
Tareas Técnicas: Modificar processFiles en server/routes.ts para que condicione la llamada a storage.saveComparisonResult según autoSaveResults. Si es false, el resultado procesado deberá almacenarse temporalmente (ej., en processingState o similar) para que /api/comparisons/save pueda recuperarlo y persistirlo. La generación del resultado en matcher.ts NO DEBE CAMBIAR.
Archivos afectados: server/routes.ts, client/src/components/dashboard/results-section.tsx.
User Story 3.5 (Backend - Muy Baja Prioridad/Opcional): Si API4AI no maneja eficientemente PDFs de múltiples páginas, implementar la función splitPdf en server/ocr.ts usando pdf-lib. Proceder solo si es absolutamente crítico y se puede garantizar que no afectará la extracción de texto principal.
Archivos afectados: server/ocr.ts.
NIVEL 4: REFINAMIENTO DE EXPERIENCIA DE USUARIO (Prioridad Baja-Media)

Épica: Pulido General de la Interfaz de Usuario.
User Story 4.1 (Frontend): Como usuario, cuando accedo a una ruta inexistente, quiero ver un mensaje amigable en la página client/src/pages/not-found.tsx (ej., "¡Ups! Página no encontrada.") con una opción para volver al dashboard.
Archivos afectados: client/src/pages/not-found.tsx.
User Story 4.2 (Frontend): Como usuario, quiero que los mensajes de notificación (toasts) sean consistentes, claros y en español.
Tareas Técnicas: Revisar el uso de useToast en todos los componentes relevantes.
Archivos afectados: Múltiples componentes en client/src/.
User Story 4.3 (Backend): Como usuario, si cancelo un procesamiento, quiero que el sistema detenga las operaciones en curso de forma elegante y limpie los archivos temporales.
Tareas Técnicas: En processFiles (server/routes.ts), añadir verificaciones periódicas del estado de processingState.isProcessing para permitir una interrupción y limpieza.
Archivos afectados: server/routes.ts.
Formato de Salida Esperado por el Agente:
Código fuente modificado y nuevos archivos. Incluir comentarios concisos en el código para las secciones que hayan sido añadidas o modificadas de forma significativa, explicando brevemente el propósito del cambio.

Confirmación Requerida del Agente:
Antes de proceder con el Nivel 3 ("Optimización y Robustez del Servidor"), solicita una confirmación explícita si alguna de las tareas propuestas podría, bajo tu análisis, infringir la "Constraint Crítico Irrompible". Propón alternativas si es necesario.