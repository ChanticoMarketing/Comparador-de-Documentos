# **PROMPT DE INGENIERÍA AVANZADA PARA REPLIT AI AGENT: ESTABILIZACIÓN Y CORRECCIÓN DE BUGS CRÍTICOS EN OCR-MATCHER AI (FASE ACTUAL)**

**ID de Contexto de Misión:** Corrección Urgente de Errores de Renderizado en React, Problemas de Persistencia de Sesión y UX en OCR-Matcher AI.

**Persona del Agente de IA (Replit AI Agent):**
Actúa como un Ingeniero de Software Full-Stack Senior, con especialización en depuración avanzada de aplicaciones React (Hooks, gestión de estado con `@tanstack/react-query`), resolución de problemas de layout CSS (TailwindCSS) y aseguramiento de la integridad del flujo de datos entre frontend y backend (Node.js/Express). Tu misión es estabilizar la aplicación con precisión quirúrgica, priorizando la corrección de errores bloqueantes.

**Problemas Críticos Identificados (basados en feedback y análisis de `image_321465.png`, `image_2fd226.jpg`, `image_3132cb.png` y el código fuente actualizado en GitHub):**

1.  **Error Crítico de Hooks en React - "Rendered more hooks than during the previous render" (Prioridad MÁXIMA - BLOQUEANTE):**
    * **Descripción:** Al intentar una comparación, la aplicación falla con el error "Rendered more hooks than during the previous render". La imagen `image_321465.png` señala un `useEffect` en `client/src/components/dashboard/processing-section.tsx` (alrededor de la línea 92 del código original). Este error es causado por la llamada condicional de Hooks o una variación en el número de Hooks ejecutados entre renders.
    * **Impacto:** Crítico. Impide completamente el flujo de comparación y la visualización de resultados.

2.  **Flujo de Resultados Interrumpido y Cierre de Sesión al Refrescar (Prioridad ALTA - Consecuencia de Tarea 1 y configuración de sesión):**
    * **Descripción:** Los resultados de la comparación no se muestran automáticamente en la UI (`client/src/components/dashboard/results-section.tsx`). Anteriormente, un refresco manual era una solución temporal, pero ahora, debido a la implementación de la autenticación, refrescar la página provoca el cierre de sesión, impidiendo que el usuario vea los resultados.
    * **Impacto:** Alto. La funcionalidad principal es inaccesible de manera fluida.

3.  **Doble Barra de Navegación Vertical (Scrollbars) (Prioridad MEDIA):**
    * **Descripción:** Persiste la presencia de dos barras de scroll verticales en el lado derecho del dashboard (`image_2fd226.jpg`), afectando la usabilidad y la estética de `client/src/components/layout/dashboard-layout.tsx`.
    * **Impacto:** Medio. Degrada la experiencia de usuario.

4.  **Funcionalidad de Barras de Progreso (Prioridad MEDIA - Decisión de Diseño/Implementación):**
    * **Descripción:** Las barras de progreso en `client/src/components/dashboard/processing-section.tsx` no ofrecen un feedback granular del avance. El backend (`server/routes.ts`) actualiza el progreso en puntos discretos (0%, 10%, 90%, 100%), lo que resulta en saltos en la UI en lugar de una progresión suave (ver `image_3132cb.png`).
    * **Impacto:** Medio. El usuario carece de una indicación clara y continua del progreso.
    * **Decisión Requerida:** Evaluar y determinar la mejor aproximación:
        * **Opción A:** Mantener el formato actual de dos barras y mejorar la granularidad del feedback desde el backend.
        * **Opción B:** Cambiar a una única barra de progreso general que refleje etapas más amplias.
        * **Opción C:** Si la implementación de A o B es demasiado compleja o riesgosa para el núcleo del comparador, eliminar las barras de progreso y reemplazarlas con indicadores de estado textuales más simples.

**Objetivo Principal General (Critical Task Suite):**
Estabilizar la aplicación resolviendo el error de Hooks de React. Asegurar la correcta visualización de resultados post-procesamiento y la persistencia de la sesión de usuario. Corregir el problema de la doble barra de scroll. Implementar una solución funcional y clara para el feedback de progreso.

**Restricción Inviolable (Golden Rule - MÁXIMA ALERTA Y REITERACIÓN ABSOLUTA):**
La funcionalidad central de comparación de documentos, que involucra `server/ocr.ts` y `server/matcher.ts` y el flujo de procesamiento iniciado por `/api/upload` en `server/routes.ts`, **ES INTOCABLE EN SU LÓGICA INTERNA DE PROCESAMIENTO Y GENERACIÓN DE RESULTADOS (`ComparisonResult`).** Las correcciones deben ser periféricas y no deben alterar este comportamiento fundamental.

---

### **Directivas Detalladas para la Solución de Problemas (En Estricto Orden de Prioridad):**

**Tarea Prioritaria 1: Resolución Inmediata del Error de Hooks en React**

* **Objetivo Específico:** Eliminar el error "Rendered more hooks than during the previous render" en `client/src/components/dashboard/processing-section.tsx`.
* **Diagnóstico (basado en `image_321465.png`):** El error se origina por la llamada condicional de Hooks o una estructura que varía el número de Hooks ejecutados.
* **Estrategia de Implementación:**
    1.  **Análisis y Reestructuración en `ProcessingSection`:**
        * Revisar `client/src/components/dashboard/processing-section.tsx`.
        * Asegurar que **TODOS** los Hooks (`useQuery`, `useMutation`, `useToast`, `useEffect`, etc.) se llamen incondicionalmente en el nivel superior del componente, antes de cualquier `return` condicional.
        * La lógica del `useEffect` (línea 92 del código original en `image_321465.png`, referente a la invalidación de queries) debe permanecer, pero su *ejecución interna* puede ser condicional. La *llamada* al `useEffect` debe ser incondicional.
        * Si el componente `ProcessingSection` no debe renderizar nada bajo ciertas condiciones (e.g., `isLoading`, `!processingData`, o proceso completado), esta lógica de `return null;` DEBE situarse DESPUÉS de todas las llamadas a Hooks.
        ```typescript
        // Ejemplo de estructura correcta en ProcessingSection
        import React from "react"; // Asegurar React está importado para useEffect, etc.
        import { useQuery, useMutation } from "@tanstack/react-query";
        import { queryClient } from "@/lib/queryClient"; //
        import { useToast } from "@/hooks/use-toast"; //
        import { ProcessingStatus } from "@/types"; //
        // ... otros imports (Card, Button, Progress)

        export function ProcessingSection() {
          const { toast } = useToast(); // Hook incondicional

          const { data: processingData, isLoading } = useQuery<ProcessingStatus>({
            queryKey: ["/api/processing/status"],
            refetchInterval: (query) => {
              const data = query.state.data;
              return data && (data.ocrProgress < 100 || data.aiProgress < 100) ? 2000 : false;
            },
          }); // Hook incondicional

          const cancelMutation = useMutation({ /* ... */ }); // Hook incondicional

          // Efecto para invalidar queries al finalizar
          React.useEffect(() => {
            // La lógica DENTRO del useEffect puede ser condicional
            if (processingData?.ocrProgress === 100 && processingData.aiProgress === 100) {
              // console.log("ProcessingSection: Proceso completado detectado, invalidando queries...");
              queryClient.invalidateQueries({ queryKey: ["/api/comparisons/latest"] });
              queryClient.invalidateQueries({ queryKey: ["/api/processing/status"] });
            }
          }, [processingData]); // Dependencias correctas

          // Condición para NO renderizar el componente, DESPUÉS de todos los Hooks
          if (isLoading || !processingData || (processingData.ocrProgress === 100 && processingData.aiProgress === 100)) {
            return null;
          }

          // Resto del JSX del componente...
          // ... (incluyendo handleCancelProcess, etc.)
          return ( /* ... JSX del componente ... */ );
        }
        ```
* **Archivos Clave a Modificar:** `client/src/components/dashboard/processing-section.tsx`.

**Tarea Prioritaria 2: Resolución del Flujo de Resultados y Persistencia de Sesión**

* **Objetivo Específico:** Una vez resuelto el error de Hooks, garantizar que `ResultsSection` se actualice automáticamente al finalizar el procesamiento, y que la sesión del usuario persista entre refrescos de página.
* **Estrategia de Implementación:**
    1.  **Confirmar Invalidación de Queries:** Verificar que la lógica de `queryClient.invalidateQueries` en `ProcessingSection` (corregida en Tarea 1) se active correctamente y cause que `ResultsSection` (que usa `useQuery` para `/api/comparisons/latest` o `/api/comparisons/:id`) se actualice.
    2.  **Robustecer Persistencia de Sesión:** Revisar la configuración del middleware `express-session` y `connect-pg-simple` en `server/index.ts`. Asegurar `cookie.maxAge`, `resave: false`, `saveUninitialized: false` (o `true` si es necesario para la creación inicial de sesión antes del login). Verificar que el endpoint `/api/auth/session` permita al frontend restaurar el estado de usuario al cargar.
* **Archivos Clave:** `client/src/components/dashboard/processing-section.tsx`, `server/index.ts`.

**Tarea Prioritaria 3: Corrección de Doble Barra de Scroll Vertical**

* **Objetivo Específico:** Eliminar la barra de scroll externa del navegador.
* **Estrategia de Implementación:**
    1.  Aplicar ajustes de CSS/layout en `client/src/components/layout/dashboard-layout.tsx`. Una posible solución es asegurar que el `div` que envuelve `{children}` (y que está después de la cabecera interna del dashboard) use `flex-1 min-h-0 overflow-y-auto`, y que su contenedor padre (`main` o el `div` con `py-6`) esté configurado como `flex flex-col` para permitir esta expansión y contracción.
* **Archivos Clave:** `client/src/components/layout/dashboard-layout.tsx`.

**Tarea Prioritaria 4: Funcionalidad y Diseño de Barras de Progreso**

* **Objetivo Específico:** Mejorar el feedback visual de las barras de progreso o adoptar una alternativa más simple.
* **Estrategia de Implementación (Seleccionar UNA opción y notificar elección):**
    1.  **Opción A (Recomendada):** Modificar `server/routes.ts` (función `processFiles`) para actualizar `processingState.ocrProgress` de forma más incremental (e.g., `(archivos_ocr_completados / total_archivos_ocr) * 100`). Para `aiProgress`, los hitos actuales (10%, 90%, 100%) pueden ser suficientes si la granularidad es difícil.
    2.  **Opción B (Alternativa):** Consolidar en una única barra de progreso en `client/src/components/dashboard/processing-section.tsx`, con actualizaciones desde el backend para `processingState.overallProgress` y `processingState.currentStepName`.
    3.  **Opción C (Contingencia):** Si A y B implican riesgo al núcleo: Eliminar las barras de progreso y usar solo mensajes de texto para indicar el estado.
* **Archivos Clave:** `server/routes.ts`, `client/src/components/dashboard/processing-section.tsx`.

**Formato de Salida Esperado por el Agente:**
Código fuente con las correcciones aplicadas. Incluir comentarios concisos en el código para las secciones modificadas, detallando la lógica de la solución, especialmente para el error de Hooks y cualquier cambio en la gestión del estado de progreso.

**Confirmación Requerida del Agente:**
Antes de proceder con la Tarea 4, indicar cuál de las opciones (A, B, o C) se implementará para las barras de progreso, justificando la elección si se desvía de la Opción A.

---