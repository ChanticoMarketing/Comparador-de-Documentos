Actualmente, al recargar cualquier página protegida (por ejemplo, el Dashboard), la aplicación me redirige instantáneamente a la página de `/login`, incluso si tengo una sesión válida. Esto ocurre porque el componente de layout (`DashboardLayout`) no espera a que la verificación de la sesión termine. Comprueba el estado `isAuthenticated` cuando todavía es `false` por defecto y ejecuta la redirección de forma prematura.

# Objetivo
Modificar el flujo de autenticación para que, al recargar la página, la aplicación espere a que la verificación de sesión finalice. Si la sesión está siendo verificada, debe mostrar un indicador de carga. Solo debe redirigir a `/login` si la verificación concluye y el usuario no está autenticado.

# Instrucciones Detalladas por Archivo

**1. Modificar `client/src/contexts/AuthContext.tsx`**

- **Acción:** Introduce un nuevo estado `isLoading` en el `AuthContext`.
- **Lógica:**
    - El estado `isLoading` debe inicializarse en `true`.
    - En el `useEffect` que llama a la función `checkAuthStatus` (o a la API `/api/me`), establece `isLoading` en `false` DESPUÉS de que la llamada a la API haya finalizado, tanto en el caso de éxito (`.then()`) como en el de error (`.catch()` o `.finally()`).
    - Asegúrate de que el `AuthContext.Provider` exponga este nuevo estado `isLoading`.

**2. Modificar `client/src/components/layout/dashboard-layout.tsx`**

- **Acción:** Actualizar la lógica de redirección para que utilice el nuevo estado `isLoading`.
- **Lógica:**
    - Importa y consume el estado `isLoading` desde `useAuth`.
    - Antes de la lógica de redirección existente (el `useEffect` que redirige si `isAuthenticated` es falso), añade una nueva condición:
        - **`if (isLoading)`:** Si `isLoading` es `true`, no hagas nada todavía. Renderiza un componente de carga a pantalla completa. Puede ser un `div` simple con un spinner o un mensaje como "Verificando sesión...". Esto evitará que el resto del componente se renderice y ejecute la redirección.
        - **`if (!isLoading && !isAuthenticated)`:** La redirección a `/login` solo debe ocurrir cuando la carga haya terminado (`isLoading` es `false`) Y el usuario no esté autenticado (`isAuthenticated` es `false`).

**Ejemplo de la lógica de renderizado en `dashboard-layout.tsx`:**

```tsx
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useEffect } from 'react';
import { Outlet } from 'react-router-dom';
// ... otros imports

export function DashboardLayout() {
  const { isAuthenticated, isLoading } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      navigate('/login');
    }
  }, [isAuthenticated, isLoading, navigate]);

  if (isLoading) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        {/* Aquí puedes poner un componente de Spinner si tienes uno */}
        <p>Cargando...</p>
      </div>
    );
  }

  // El resto del layout (Sidebar, Navbar, Outlet) solo se renderiza si no está cargando.
  // La lógica del useEffect se encargará de la redirección si no está autenticado.
  return (
    <div className="flex min-h-screen">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Navbar />
        <main className="flex-1 p-4 md:p-6">
          <Outlet />
        </main>
      </div>
    </div>
  );
}