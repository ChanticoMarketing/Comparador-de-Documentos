**Intención:** Modificar el componente `FileUploadSection` para que, después de una carga exitosa de archivos, se limpien los archivos seleccionados tanto del estado interno como de la interfaz de usuario, previniendo así la posibilidad de reenviar el mismo bloque de archivos y generar sesiones de comparación duplicadas.

**Contexto Actual del Código:**
El archivo `client/src/components/dashboard/file-upload-section.tsx` gestiona la selección y subida de archivos de facturas y órdenes de entrega. Utiliza los estados `invoiceFiles` y `deliveryFiles` para almacenar los archivos y una `uploadMutation` (de `useMutation`) para enviarlos al backend. Actualmente, después de una subida exitosa (`onSuccess`), los estados de los archivos no se resetean, lo que permite que el botón "Iniciar procesamiento" pueda ser presionado nuevamente con los mismos archivos, generando una nueva sesión. Los componentes `FileUpload` (`client/src/components/ui/file-upload.tsx`) muestran los archivos seleccionados y también necesitan ser reseteados visualmente.

**Modificaciones Solicitadas:**

En el archivo `chanticomarketing/comparador-de-documentos/Comparador-de-Documentos-3c5a3dcf821c8da32fa56c5806cd133e47965510/OcrIntelligence/OcrIntelligence/client/src/components/dashboard/file-upload-section.tsx`:

1.  **Añade un nuevo estado** al componente `FileUploadSection` llamado `fileUploadKey` inicializado con `Date.now()`:
    ```typescript
    const [fileUploadKey, setFileUploadKey] = useState(Date.now());
    ```

2.  **Actualiza el callback `onSuccess`** dentro de `uploadMutation` para que incluya lo siguiente:
    ```typescript
    onSuccess: (data) => {
      toast({
        title: "Archivos subidos correctamente",
        description: "Se ha iniciado el procesamiento de los documentos",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/comparisons"] });
      queryClient.invalidateQueries({ queryKey: ["/api/sessions"] }); // Añadir para refrescar el historial de sesiones

      // Limpiar los archivos del estado de FileUploadSection
      setInvoiceFiles([]);
      setDeliveryFiles([]);

      // Cambiar la key de los componentes FileUpload para forzar su reseteo y limpieza visual
      setFileUploadKey(Date.now());
    },
    ```

3.  **Añade la prop `key`** a las dos instancias del componente `FileUpload` en el JSX, utilizando el estado `fileUploadKey`:
    ```xml
    {/* Invoice Upload */}
    <FileUpload
      key={`invoice-${fileUploadKey}`} // Key añadida
      onFilesSelected={handleInvoiceFilesSelected}
      label="Facturas"
      // ... (resto de props existentes)
    />

    {/* Delivery Order Upload */}
    <FileUpload
      key={`delivery-${fileUploadKey}`} // Key añadida
      onFilesSelected={handleDeliveryFilesSelected}
      label="Órdenes de Entrega"
      // ... (resto de props existentes)
    />
    ```

**Verificación:**
Asegúrate de que después de aplicar estos cambios:
* Los estados `invoiceFiles` y `deliveryFiles` en `FileUploadSection` se vacíen después de una subida exitosa.
* Los componentes `FileUpload` en la UI ya no muestren los nombres de los archivos después de una subida exitosa.
* El botón "Iniciar procesamiento" quede correctamente deshabilitado después de la limpieza si no hay archivos nuevos (debido a la condición `invoiceFiles.length === 0 || deliveryFiles.length === 0`).