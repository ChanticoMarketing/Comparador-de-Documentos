Actúa como un Ingeniero de Software Senior experto en Node.js, Express, React, TypeScript y Drizzle ORM. Tu tarea es refactorizar la lógica de procesamiento de archivos de la WebApp para que maneje correctamente la comparación de "bloques" de documentos de forma secuencial y corrija el error donde se reportan más bloques procesados de los que se subieron, asegurando que los resultados de cada bloque se muestren correctamente.

**Contexto del Problema:**
La WebApp debe permitir al usuario subir múltiples pares de documentos (facturas y órdenes de entrega), donde cada par (o un archivo de factura contra un archivo de orden de entrega correspondiente) constituye un "bloque" de comparación. Estos bloques deben procesarse consecutivamente. Actualmente, la aplicación concatena todos los archivos subidos en una única gran comparación por sesión, en lugar de procesar bloques individuales. Esto causa que la UI (una UI que muestra "Resultados de todos los bloques procesados") reporte un número incorrecto de bloques y no muestre los resultados individuales por bloque.

**Archivos Principales a Modificar:**
1.  `server/routes.ts`: Principalmente la función `processFiles` y, potencialmente, la ruta `/api/upload`.
2.  `server/storage.ts`: Para asegurar que los resultados de cada bloque se guarden y puedan recuperarse individualmente.
3.  `client/src/components/dashboard/results-section.tsx`: Para que pueda mostrar los resultados de múltiples bloques de la sesión más reciente, en lugar de un único resultado. (Opcional si la UI de la captura es un componente diferente, pero el endpoint que consume necesitará cambios).
4.  `client/src/pages/dashboard.tsx`: Para integrar la visualización correcta de los resultados de los bloques.

**Lógica de Comparación Existente (Proteger y Reutilizar):**
La lógica de comparación real y OCR ya funciona y es valiosa. Se encuentra en:
* `server/matcher.ts` (especialmente `compareDocuments` y `buildComparisonPrompt`).
* `server/ocr.ts` (especialmente `extractText`).
Esta lógica debe ser invocada *por cada bloque* de documentos, no una sola vez con todo el texto concatenado.

**Requisitos Específicos de la Solución:**

1.  **Modificación de `server/routes.ts` (`processFiles`):**
    * La función `processFiles` debe ser modificada para iterar sobre los archivos subidos de manera que procese "bloques" individuales. Un "bloque" se definirá, por ahora, como el par formado por `invoiceFiles[i]` y `deliveryOrderFiles[i]`.
    * Si el número de facturas y órdenes de entrega no coincide, se debe manejar apropiadamente (por ejemplo, loguear un error o advertencia y procesar solo los pares posibles, o devolver un error al usuario si es un requisito estricto). Para este cambio, asume que se procesarán tantos bloques como el mínimo de archivos de factura u órdenes de entrega haya.
    * Para cada bloque (par de `invoiceFile` y `deliveryOrderFile`):
        * Realizar OCR para ambos documentos del bloque actual.
        * Llamar a `matcherService.compareDocuments` con el texto y datos estructurados *solo* de los documentos del bloque actual.
        * El `invoiceFilename` y `deliveryOrderFilename` pasados a `compareDocuments` y posteriormente guardados deben ser los de los archivos del bloque actual.
        * Guardar el `ComparisonResult` devuelto por `matcherService.compareDocuments` como un registro individual en la tabla `comparisons`, asociado a la `sessionId` creada en `/api/upload`. La tabla `comparisons` ya tiene una `sessionId`, permitiendo múltiples comparaciones por sesión.
    * Actualizar el `processingState` global (o una versión mejorada del mismo) para reflejar el progreso a través de los bloques. Por ejemplo:
        * `ocrProgress` podría calcularse como `(bloques_ocr_completados / total_bloques) * 100`.
        * `aiProgress` podría calcularse como `(bloques_comparados / total_bloques) * 100`.
        * `currentOcrFile` y cualquier estado de archivo individual deben actualizarse para el archivo/bloque actualmente en procesamiento.
    * Asegurar que el estado `processingState.isProcessing` se maneje correctamente, poniéndose a `false` solo cuando todos los bloques hayan sido procesados o si ocurre un error irrecuperable.

2.  **Modificación de `server/storage.ts`:**
    * La función `saveComparisonResult` debe asegurar que guarda correctamente cada `ComparisonResult` de un bloque. La estructura actual parece adecuada, ya que crea un nuevo registro `comparisons` y sus ítems/metadatos asociados.
    * La función `getMostRecentComparison()` (usada por `/api/comparisons/latest`) actualmente devuelve solo UN resultado. Si la UI de "Resultados de todos los bloques procesados" (como en la captura de pantalla del usuario) debe mostrar los resultados de la última *sesión de subida* (que ahora puede tener múltiples bloques/comparaciones), se necesitará:
        * Una nueva función en `storage.ts` como `getComparisonsBySessionId(sessionId: number): Promise<ComparisonResult[]>`.
        * Una nueva ruta en `server/routes.ts`, por ejemplo `/api/sessions/:sessionId/comparisons`, que use esta nueva función.
        * Alternativamente, si `/api/comparisons/latest` debe devolver todos los bloques de la última sesión, `getMostRecentComparison` deberá modificarse para obtener la `sessionId` más reciente y luego todas sus comparaciones asociadas. Para este cambio, modifica `/api/comparisons/latest` y `storage.getMostRecentComparison` para que devuelvan un array `ComparisonResult[]` correspondiente a todos los bloques de la sesión más reciente.

3.  **Modificación de `client/src/components/dashboard/results-section.tsx` (y/o la UI de la captura):**
    * Actualizar el componente que muestra los resultados (sea `ResultsSection` o el componente de la captura) para que:
        * Obtenga un array de `ComparisonResult[]` del endpoint modificado `/api/comparisons/latest` (o la nueva ruta si se creó).
        * Itere sobre este array y muestre cada `ComparisonResult` como un "bloque" individual, similar a lo visto en la captura de pantalla del usuario (con su nombre de archivo, contadores de coincidencias/advertencias/discrepancias y un botón "Ver detalles" que podría llevar a una vista detallada de esa comparación específica usando su ID).
    * Asegurar que el estado de carga y error se maneje adecuadamente.

4.  **Manejo de Errores y Estado:**
    * Si un bloque falla durante el OCR o la comparación, se debe registrar el error para ese bloque específico (quizás en el `ComparisonResult` de ese bloque o actualizando el `errorMessage` de la `Session` principal con detalles del bloque fallido).
    * La aplicación debe intentar continuar con el siguiente bloque si es posible, o detenerse y marcar la sesión como errónea si el error es crítico.
    * El `processingState.error` debe reflejar errores a nivel de sesión o del bloque actual.

5.  **Limpieza de Archivos:**
    * Asegurar que todos los archivos temporales de todos los bloques se limpien después de que todos los bloques de una sesión hayan sido procesados o si el procesamiento se cancela/falla.

**Consideraciones Adicionales (Buenas Prácticas):**
* La lógica de `uploadMutation` en `FileUploadSection` podría necesitar enviar información sobre cómo el usuario desea agrupar los archivos en bloques si se implementa una UI más avanzada para la definición de bloques en el futuro. Por ahora, el emparejamiento por índice es suficiente para la corrección del backend.
* Asegurar que no haya condiciones de carrera al actualizar el `processingState` global.
* Optimizar las consultas a la base de datos si es necesario, especialmente al recuperar múltiples comparaciones para una sesión.

**Resultado Esperado:**
La WebApp deberá procesar cada par de (factura, orden de entrega) subido como un bloque de comparación individual y secuencial. La UI deberá reflejar correctamente el número de bloques procesados y permitir ver los resultados de cada uno. El problema de los "bloques fantasma" deberá estar resuelto.