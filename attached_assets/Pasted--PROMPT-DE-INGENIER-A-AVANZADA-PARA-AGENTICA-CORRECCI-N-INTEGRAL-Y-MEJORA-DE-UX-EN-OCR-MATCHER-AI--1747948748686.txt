# PROMPT DE INGENIERÍA AVANZADA PARA AGENTICA: CORRECCIÓN INTEGRAL Y MEJORA DE UX EN OCR-MATCHER AI (Fase 2)

**ID de Contexto de Misión:** Resolución de Bugs Críticos Post-Autenticación, Funcionalidad de Barras de Progreso y Refinamiento de UI.

**Persona del Agente de IA (Agentica):**
Actúa como un Ingeniero de Software Full-Stack Senior, con un enfoque obsesivo en la experiencia de usuario (UX), la robustez del flujo de datos y la depuración precisa de layouts CSS. Tu capacidad para integrar funcionalidades de frontend y backend de manera fluida es crucial.

**Problemas Críticos Detectados (basados en feedback y análisis de `image_2fd226.jpg` y `image_3132cb.png`):**

1.  **Desincronización de Resultados y Cierre de Sesión al Refrescar (Prioridad ALTA):**
    * **Descripción:** Tras la finalización del procesamiento de comparación de documentos, los resultados no se reflejan automáticamente en la UI (`client/src/components/dashboard/results-section.tsx`). Un refresco manual de la página es necesario. Sin embargo, con la nueva implementación de autenticación, este refresco provoca el cierre de la sesión del usuario, impidiendo el acceso a los resultados de la comparación recién efectuada.
    * **Impacto:** Crítico. El flujo principal de la aplicación está roto, ya que el usuario no puede acceder a los resultados de forma directa y persistente.

2.  **Doble Barra de Navegación Vertical (Scrollbars) (Prioridad MEDIA):**
    * **Descripción:** La interfaz del dashboard (`client/src/components/layout/dashboard-layout.tsx`) persiste en mostrar dos barras de scroll verticales en el lado derecho (evidente en `image_2fd226.jpg`), lo que deteriora la experiencia de usuario.
    * **Impacto:** Medio. Aunque funcional, afecta negativamente la usabilidad y estética.

3.  **Ineficacia de las Barras de Progreso (Prioridad MEDIA):**
    * **Descripción:** Las barras de progreso en `client/src/components/dashboard/processing-section.tsx` ("Extracción de datos" y "Análisis Comparativo") no muestran un avance granular. Parecen saltar de 0% a estados finales, sin ofrecer un feedback visual continuo del progreso (ver `image_3132cb.png`). La lógica en `server/routes.ts` actualiza estos progresos en puntos discretos.
    * **Impacto:** Medio. Reduce la confianza del usuario al no tener una indicación clara del progreso en tiempo real.

**Objetivo Principal General (Critical Task Suite):**
Rectificar los problemas identificados para asegurar una experiencia de usuario fluida, intuitiva y con feedback adecuado. Esto incluye la correcta visualización de resultados post-procesamiento sin pérdida de sesión, la eliminación de artefactos visuales como el doble scroll, y la mejora o replanteamiento del sistema de barras de progreso.

**Restricción Inviolable (Golden Rule - REITERACIÓN):**
La funcionalidad central de comparación de documentos (motor de `server/ocr.ts` y `server/matcher.ts`) **NO DEBE SER ALTERADA EN SU LÓGICA INTERNA.** Las soluciones deben operar sobre el flujo de datos, la gestión de estado y los estilos, sin modificar cómo se genera el `ComparisonResult`.

---

### **Directivas Detalladas para la Solución de Problemas:**

**Tarea Prioritaria 1: Resolución del Flujo de Resultados y Persistencia de Sesión**

* **Objetivo Específico:** Garantizar que, tras finalizar el procesamiento de backend, `ResultsSection` se actualice automáticamente con los nuevos datos de comparación. La sesión del usuario debe persistir robustamente incluso después de refrescar la página.
* **Estrategia de Implementación:**
    1.  **Actualización Automática de Resultados en Frontend:**
        * En `client/src/components/dashboard/processing-section.tsx`, modificar el hook `useQuery` que consulta `/api/processing/status`. Cuando `processingData.aiProgress` alcance el 100% (y `ocrProgress` también sea 100%), se debe disparar la invalidación de la query `/api/comparisons/latest` utilizando `queryClient.invalidateQueries({ queryKey: ["/api/comparisons/latest"] })`. Esto forzará a `ResultsSection` a refetchear y mostrar los nuevos datos.
        * Adicionalmente, invalidar la query `/api/processing/status` para que `ProcessingSection` se oculte una vez completado el proceso.
    2.  **Persistencia de Sesión de Usuario:**
        * Revisar y asegurar la correcta configuración del middleware `express-session` en `server/index.ts` (o donde se haya configurado) y el store `connect-pg-simple`.
            * Verificar `cookie.maxAge` para una duración adecuada.
            * Asegurar `resave: false` y `saveUninitialized: false` (o `true` si es necesario para la lógica de sesión inicial).
            * Confirmar que el endpoint `/api/auth/session` (si fue creado como parte de la tarea de autenticación) es funcional y permite al frontend verificar y restaurar el estado de sesión al cargar la aplicación (`client/src/App.tsx` o un gestor de estado global).
* **Archivos Clave:** `client/src/components/dashboard/processing-section.tsx`, `server/index.ts`, `client/src/App.tsx`, `client/src/lib/queryClient.ts`.

**Tarea Prioritaria 2: Corrección de Doble Barra de Scroll Vertical**

* **Objetivo Específico:** Eliminar la barra de scroll vertical externa (del navegador), dejando únicamente la barra de scroll interna del área de contenido principal.
* **Estrategia de Implementación:**
    1.  **Revisión de Layout en `client/src/components/layout/dashboard-layout.tsx`:**
        * El contenedor raíz `div className="flex h-screen overflow-hidden ..."` debe mantener `overflow-hidden`.
        * El elemento `<main className="flex-1 overflow-y-auto ...">` es el candidato para el scroll principal.
        * El `div className="py-6 px-4 ..."` dentro de `<main>`: Si este `div` es el que debe ocupar el espacio restante y ser scrolleable (junto con sus hijos), entonces el `overflow-y-auto` debería estar en este `div` y no en `<main>`. `<main>` entonces podría ser `flex-1 flex flex-col`.
            ```html
            // Propuesta de ajuste en DashboardLayout, dentro del <main>
            <main className="flex-1 flex flex-col overflow-hidden"> {/* main ahora es flex-col y oculta su propio overflow si no es necesario */}
              <div className="py-6 px-4 sm:px-6 lg:px-8 flex flex-col flex-1 min-h-0"> {/* Este div ahora es el que maneja el flex principal del contenido */}
                {/* Header (no scrolleable con el contenido principal) */}
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between pb-6 border-b border-gray-700">
                  {/* ... title, description, action ... */}
                </div>
                
                {/* Page content wrapper (este es el que scrollea) */}
                <div className="flex-1 min-h-0 overflow-y-auto mt-4"> {/* Añadir mt-4 si se desea espacio desde la cabecera */}
                  {children}
                </div>
              </div>
            </main>
            ```
        * Alternativamente, si la cabecera SÍ debe scrollear con el contenido, la estructura actual del `main` con `overflow-y-auto` es casi correcta, pero el problema podría ser que el `h-screen` del padre, menos la altura de la cabecera del navegador y otros elementos fijos, no deja el espacio exacto, causando un micro-desbordamiento. Aplicar `min-h-0` a los hijos directos de un contenedor flex con `overflow` a menudo resuelve estos problemas de cálculo de desbordamiento.
* **Archivos Clave:** `client/src/components/layout/dashboard-layout.tsx`.

**Tarea Prioritaria 3: Funcionalidad y/o Rediseño de Barras de Progreso**

* **Objetivo Específico:** Proporcionar al usuario un feedback visual útil sobre el progreso del procesamiento, o simplificar/eliminar las barras si la implementación granular es demasiado riesgosa o compleja.
* **Estrategia de Implementación (Decidir y ejecutar la más viable y segura):**
    1.  **Opción A (Recomendada - Mejorar Feedback Backend):**
        * Modificar la función `processFiles` en `server/routes.ts`:
            * Para `ocrProgress`: Actualizar `processingState.ocrProgress` de forma más incremental. Si se procesan varios archivos, calcular `(archivos_procesados / total_archivos_ocr) * 100`.
            * Para `aiProgress`: Mantener los hitos (e.g., 10% al iniciar llamada a `matcherService`, 90% al recibir respuesta, 100% al finalizar guardado/actualización de sesión). Esto ya está parcialmente implementado.
        * Asegurar que cada actualización de `processingState` en el backend sea accesible por el polling del frontend.
    2.  **Opción B (Alternativa - Barra Única Consolidada):**
        * En `server/routes.ts`: Introducir `processingState.overallProgress` y `processingState.currentStepName`. Definir etapas claras (ej: Subida, OCR Factura 1, OCR Orden 1, Análisis IA, Completado) y actualizar el progreso general según estas etapas.
        * En `client/src/components/dashboard/processing-section.tsx`: Modificar para mostrar una sola barra de progreso y el `currentStepName`.
    3.  **Opción C (Contingencia - Simplificar/Eliminar):**
        * Si A y B son inviables sin riesgo: Eliminar las `<Progress>` de `ProcessingSection` y mostrar solo los mensajes de texto actuales (ej., "Procesando: [nombre_archivo]", "Esperando a que finalice el OCR...", "Analizando con GPT-4.1...").
* **Archivos Clave:** `server/routes.ts`, `client/src/components/dashboard/processing-section.tsx`.
* **Directiva para IA:** Implementar **Opción A**. Si se determina que es demasiado complejo para actualizar `ocrProgress` de forma granular sin afectar la lógica central, proceder con **Opción B**. Solo como último recurso, implementar **Opción C**. Notificar antes de cambiar a B o C.

**Formato de Salida Esperado por el Agente:**
Código fuente modificado y nuevos archivos si son necesarios. Comentarios en el código explicando las soluciones implementadas, especialmente para la lógica de actualización de UI y el manejo del layout.

**Recordatorio Final (The Bottom Line):**
La estabilidad del sistema de comparación es primordial. Las soluciones deben ser robustas y no introducir regresiones. Si hay dudas, prioriza la solución más segura y menos invasiva.

---